ITSE - TECNICATURA SUPERIOR EN  PROGRAMACIÓN
Base de Datos II
Práctica 4.1
NoSQL - MongoDB Arreglos
Apellido y Nombre: Barco Exequiel

Actividades: 
Para cada ítem, mostrar el documento antes y después de ejecutar la sentencia. La salida debe ser breve, no mostrar más de 4 documentos


1. Descargar de la plataforma la Base de datos minegocio.json
   1. Importar la DB con la colección restaurantes
Comando:
	mongoimport --db=TP41BarcoExequiel --collection=restaurantes --file="G:\Programacion\ITSE\3er Cuatrimestre\Tarea Base de Datos\Mongodb\minegocio.json"
Salida:
	2022-06-21T10:32:55.784-0300    connected to: mongodb://localhost/
	2022-06-21T10:32:58.785-0300    [###############.........] TP41BarcoExequiel.restaurantes       8.04MB/12.1MB (66.6%)
	2022-06-21T10:33:00.422-0300    [########################] TP41BarcoExequiel.restaurantes       12.1MB/12.1MB (100.0%)
	2022-06-21T10:33:00.422-0300    25359 document(s) imported successfully. 0 document(s) failed to import.
   
   2. Mostrar la cantidad de documentos de la colección  restaurantes
Comando:
	db.restaurantes.count()
Salida:
	25359
	
   3. Mostrar los 3 primeros documentos de la colección  restaurantes. 
Comando:
   db.restaurantes.find({}).limit(3).pretty()
Salida:
{
        "_id" : ObjectId("629e8fc78e98a8123a7ba7c4"),
        "address" : {
                "building" : "469",
                "coord" : [
                        -73.961704,
                        40.662942
                ],
                "street" : "Flatbush Avenue",
                "zipcode" : "11225"
        },
        "borough" : "Brooklyn",
        "cuisine" : "Hamburgers",
        "grades" : [
                {
                        "date" : ISODate("2014-12-30T00:00:00Z"),
                        "grade" : "A",
                        "score" : 8
                },
                {
                        "date" : ISODate("2014-07-01T00:00:00Z"),
                        "grade" : "B",
                        "score" : 23
                },
                {
                        "date" : ISODate("2013-04-30T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                },
                {
                        "date" : ISODate("2012-05-08T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                }
        ],
        "name" : "Wendy'S",
        "restaurant_id" : "30112340"
}
{
        "_id" : ObjectId("629e8fc78e98a8123a7ba7c3"),
        "address" : {
                "building" : "1007",
                "coord" : [
                        -73.856077,
                        40.848447
                ],
                "street" : "Morris Park Ave",
                "zipcode" : "10462"
        },
        "borough" : "Bronx",
        "cuisine" : "Bakery",
        "grades" : [
                {
                        "date" : ISODate("2014-03-03T00:00:00Z"),
                        "grade" : "A",
                        "score" : 2
                },
                {
                        "date" : ISODate("2013-09-11T00:00:00Z"),
                        "grade" : "A",
                        "score" : 6
                },
                {
                        "date" : ISODate("2013-01-24T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2011-11-23T00:00:00Z"),
                        "grade" : "A",
                        "score" : 9
                },
                {
                        "date" : ISODate("2011-03-10T00:00:00Z"),
                        "grade" : "B",
                        "score" : 14
                }
        ],
        "name" : "Morris Park Bake Shop",
        "restaurant_id" : "30075445"
}
{
        "_id" : ObjectId("629e8fc78e98a8123a7ba7c5"),
        "address" : {
                "building" : "351",
                "coord" : [
                        -73.98513559999999,
                        40.7676919
                ],
                "street" : "West   57 Street",
                "zipcode" : "10019"
        },
        "borough" : "Manhattan",
        "cuisine" : "Irish",
        "grades" : [
                {
                        "date" : ISODate("2014-09-06T00:00:00Z"),
                        "grade" : "A",
                        "score" : 2
                },
                {
                        "date" : ISODate("2013-07-22T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2012-07-31T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                },
                {
                        "date" : ISODate("2011-12-29T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                }
        ],
        "name" : "Dj Reynolds Pub And Restaurant",
        "restaurant_id" : "30191841"
}
   
   
   4. Saltar los 2 primeros y mostrar los 3 siguientes documentos de la colección  restaurantes. (mostrar solo el nombre y dirección)
   Comando:
   db.restaurantes.find({},{"name":1, "address":1,"_id":0}).skip(2).limit(3).pretty()
{
        "address" : {
                "building" : "351",
                "coord" : [
                        -73.98513559999999,
                        40.7676919
                ],
                "street" : "West   57 Street",
                "zipcode" : "10019"
        },
        "name" : "Dj Reynolds Pub And Restaurant"
}
{
        "address" : {
                "building" : "2780",
                "coord" : [
                        -73.98241999999999,
                        40.579505
                ],
                "street" : "Stillwell Avenue",
                "zipcode" : "11224"
        },
        "name" : "Riviera Caterer"
}
{
        "address" : {
                "building" : "97-22",
                "coord" : [
                        -73.8601152,
                        40.7311739
                ],
                "street" : "63 Road",
                "zipcode" : "11374"
        },
        "name" : "Tov Kosher Kitchen"
}
   
   5. Mostrar los 3 primeros restaurantes ordenado por número de edificio (mostrar solo el nombre y dirección)
Comando:
db.restaurantes.find({},{"name":1,"address":1}).sort({"address.building":1}).limit(3).skip(1050).pretty()
Salida:
{
        "_id" : ObjectId("629e8fcb8e98a8123a7be352"),
        "address" : {
                "building" : "104",
                "coord" : [
                        -73.99711429999999,
                        40.717498
                ],
                "street" : "Mott Street",
                "zipcode" : "10013"
        },
        "name" : "Shanghai Heping Restaurant"
}
{
        "_id" : ObjectId("629e8fc98e98a8123a7bc445"),
        "address" : {
                "building" : "104",
                "coord" : [
                        -74.07979999999999,
                        40.637517
                ],
                "street" : "Victory Boulevard",
                "zipcode" : "10301"
        },
        "name" : "Panaderia La Mixteca Poblana & Deli"
}
{
        "_id" : ObjectId("629e8fcb8e98a8123a7bed4d"),
        "address" : {
                "building" : "104",
                "coord" : [
                        -74.00693079999999,
                        40.7096482
                ],
                "street" : "Fulton Street",
                "zipcode" : "10038"
        },
        "name" : "Wanted Pizza"
} 

2. Crear la colección usuarios y dar de alta por lo menos 5 documentos (usuarios) en la colección: Ale, Pepe, Coco, Milo
   1. Formato base del documento: 
{      "nombre" : "Ale",
        "edad" : 22,
        "colores" : [ "verde”, “azul” ],
        "numeros" : [ 20, 50, 11 ]
}
Comando:
db.createCollection("usuarios")
Salida:
{ "ok" : 1 }

Comando:
db.usuarios.insertMany(
[
	{
	"nombre": "Ale",
	"edad": 22,
	"colores": ["verde", "azul"],
	"numeros" : [20, 50, 11]
	}
,
	{
	"nombre": "Pepe",
	"edad": 15,
	"colores": ["rojo", "amarillo"],
	"numeros" : [50, 22, 10, 55]
	}
,
	{
	"nombre": "Coco",
	"edad": 18,
	"colores": ["rojo", "verde"],
	"numeros" : [22, 70, 90, 11]
	}
,
	{
	"nombre": "Milo",
	"edad": 21,
	"colores": ["verde", "amarillo"],
	"numeros" : [50, 100, 202]
	}
])

3. Operaciones
   1. Agregar a Milo el color amarillo, aunque ya lo tenga.
   db.usuarios.updateOne({"nombre":"Milo"},{$push : {"colores":"amarillo"}})
   
   2. Agregar a Milo el numero 20 solo si no lo tiene.
   db.usuarios.updateOne({"nombre":"Milo"},{$addToSet:{"numeros": 20}})
   
   3. Agregar a Milo los colores verde y gris en un solo paso
   db.usuarios.updateOne({"nombre":"Milo"},{$addToSet:{"colores":{$each:["verde","gris"]}}})
   
   4. Agregar a Milo los numeros 50, 100, 200 solo si no los tiene, en un solo paso.
   db.usuarios.updateOne({"nombre":"Milo"},{$addToSet:{"numeros":{$each: [50,100,200]}}});
   
   5. Limitar el tamaño del arreglo numeros de Milo a solo los 3 primeros elementos.
   db.usuarios.find({"nombre" : "Milo"}, { numeros: {$slice:3}}).pretty()
   
   6. Limitar el tamaño del arreglo colores de Ale a solo los 2 últimos elementos.
   db.usuarios.find({"nombre" : "Ale"}, { colores: {$slice:-2}}).pretty()
   
   7. Ordenar un arreglo descende.
   db.usuarios.updateOne({"nombre":"Milo"},{$push:{numeros:{$each:[],$sort:-1}}})
   
   8. Eliminar el 1er color de Ale
   db.usuarios.updateOne({"nombre":"Ale"},{$pop:{"colores": -1}})
   
   9. Eliminar el color rojo de Ale
    db.usuarios.updateOne({"nombre":"Ale"},{$pop:{"colores": "rojo"}})
   
   10. Mostrar todos los usuarios que tengan el color verde.
   db.usuarios.find({colores:"verde"}).pretty()
   
   11. Mostrar todos los usuarios que tengan el color verde y amarillo.
   db.usuarios.find({$and:[{"colores":"verde"},{"colores":"amarillo"}]}).pretty()

   12. Mostrar todos los usuarios que tengan el color verde o amarillo.
   db.usuarios.find({$or:[{colores:"verde"},{colores:"amarillo"}]}).pretty();
   
   13. Mostrar todos los usuarios que tengan el color amarillo como 2do elemento.
   db.usuarios.find({"colores.1": "amarillo"}).pretty()
   
   14. Mostrar todos los usuarios pero de los colores solo los 2 ultimos.
   db.usuarios.find({}, { colores: {$slice:2}}).pretty()

Exportar la coleccion usuarios de la Base de Datos con el nombre DBApellidoNombre.json y subirlo a la plataforma
Subir el archivo de la practica a la plataforma con la extensión .JSON    (ejem: TP41ApellidoNombre.json)

mongoexport --collection=usuarios --db=TP41BarcoExequiel --out="C:\data\DBBarcoExequiel.json"
mongoexport --collection=restaurantes --db=TP41BarcoExequiel --out="C:\data\TP41BarcoExequiel.json"